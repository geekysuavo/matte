
% test.m: simple set of unit tests for base type behaviors.
% refactor once error(), warn(), assert(), etc. are working.

% === int ===
% eq
2 == 2
% plus
2 + 3 == 5
% minus
5 - 7 == -2
% uminus
-(2) == 0 - 2
% times
11 .* 13 == 143
% mtimes
11 * 13 == 143
% rdivide
51 ./ 3 == 17
% ldivide
3 .\ 51 == 17
% mrdivide
51 / 3 == 17
53 / 3 == 17 % (floor division)
% mldivide
3 \ 51 == 17
% power
2 .^ 12 == 4096
% mpower
2 ^ 10 == 1024
% lt
(2 < 3) == 1
(3 < 2) == 0
% gt
(3 > 2) == 1
(2 > 3) == 0
% le
(2 <= 3) == 1
(3 <= 2) == 0
(3 <= 3) == 1
% ge
(3 >= 2) == 1
(2 >= 3) == 0
(3 >= 3) == 1
% ne
(2 != 3) == 1
(3 != 3) == 0
% and
(0 & 0) == 0
(0 & 1) == 0
(1 & 0) == 0
(1 & 1) == 1
% or
(0 | 0) == 0
(0 | 1) == 1
(1 | 0) == 1
(1 | 1) == 1
% mand
(0 && 0) == 0
(0 && 1) == 0
(1 && 0) == 0
(1 && 1) == 1
% mor
(0 || 0) == 0
(0 || 1) == 1
(1 || 0) == 1
(1 || 1) == 1
% not
!2 == 0
!0 == 1
% colon
1 : 3 == 1 : 1 : 3
% ctranspose
3' == 3
% transpose
(5).' == 5
% horzcat
[2, 3, 5] == [2, 3, 5]
% vertcat
[7; 9; 11] == [7; 9; 11]

% === range ===
% eq
1 : 3 == 1 : 1 : 3 % (default step)
% plus
(1 : 3) + (2 : 4) == 3 : 2 : 7
(1 : 3) + 2 == 3 : 5
2 + (1 : 3) == 3 : 5
% minus
(1 : 3) - (2 : 2 : 6) == -1 : -1 : -3
(1 : 3) - 2 == -1 : 1
10 - (1 : 3) == 9 : -1 : 7
-(1 : 3) == -1 : -1 : -3
% times
(1 : 3) .* 2 == 2 : 2 : 6
(1 : 3) .* -2 == -2 : -2 : -6
% mtimes
(1 : 3) * 2 == 2 : 2 : 6
(1 : 3) * -2 == -2 : -2 : -6
% mand
((1 : 3) && 1) == 1
((1 : 3) && 0) == 0
((0 : 2) && 1) == 0
((0 : 2) && 0) == 0
% mor
((1 : 3) || 1) == 1
((1 : 3) || 0) == 1
((0 : 2) || 1) == 1
((0 : 2) || 0) == 0
% horzcat
[1 : 3, -5, 7 : 9] == [1, 2, 3, -5, 7, 8, 9]
% vertcat
[1 : 3] == [1 : 3]

% === float ===
% eq
3.14 == 3.14
3.14 == 3.14e0
3.14 == 3.14E0
3.14 == 3.14e+0
3.14 == 3.14E+0
3.0 == 3
3 == 3.0
% plus
1.2 + 2.3 == 3.5
1.2 + 2 == 3.2
% minus
1 - (1.2 - 2.2 - -1)^2
% uminus
-3.14 == 0 - 3.14
% times
1.25 .* 4.0 == 5.0
1.125 .* 8 == 9.0
% mtimes
1.1 * 2.0 == 2.2
1.5 * 3 == 4.5
% rdivide
9.3 ./ 3.0 == 3.1
9.3 ./ 3 == 3.1
9 ./ 3.0 == 3.0
% ldivide
3.0 .\ 9.3 == 3.1
3.0 .\ 9 == 3.0
3 .\ 9.3 == 3.1
% mrdivide
9.3 / 3.0 == 3.1
9.3 / 3 == 3.1
9 / 3.0 == 3.0
% mldivide
3.0 \ 9.3 == 3.1
3.0 \ 9 == 3.0
3 \ 9.3 == 3.1
% power
3.0 .^ 2.0 == 9.0
3.0 .^ 2 == 9.0
3 .^ 2.0 == 9.0
% mpower
3.0 ^ 2.0 == 9.0
3.0 ^ 2 == 9.0
3 ^ 2.0 == 9.0
% lt
(2.0 < 3.0) == 1
(2.0 < 3) == 1
(2 < 3.0) == 1
(3.0 < 2.0) == 0
(3.0 < 2) == 0
(3 < 2.0) == 0
% gt
(2.0 > 3.0) == 0
(2.0 > 3) == 0
(2 > 3.0) == 0
(3.0 > 2.0) == 1
(3.0 > 2) == 1
(3 > 2.0) == 1
% le
(2.0 <= 3.0) == 1
(2.0 <= 3) == 1
(2 <= 3.0) == 1
(3.0 <= 3.0) == 1
(3.0 <= 3) == 1
(3 <= 3.0) == 1
(3.0 <= 2.0) == 0
(3.0 <= 2) == 0
(3 <= 2.0) == 0
% ge
(2.0 >= 3.0) == 0
(2.0 >= 3) == 0
(2 >= 3.0) == 0
(3.0 >= 3.0) == 1
(3.0 >= 3) == 1
(3 >= 3.0) == 1
(3.0 >= 2.0) == 1
(3.0 >= 2) == 1
(3 >= 2.0) == 1
% ne
(2.0 != 3.0) == 1
(2.0 != 3) == 1
(2 != 3.0) == 1
(2.0 != 2.0) == 0
(2.0 != 2) == 0
(2 != 2.0) == 0
% and
(0.0 & 0.0) == 0
(0.0 & 1.0) == 0
(1.0 & 0.0) == 0
(1.0 & 1.0) == 1
(0.0 & 0) == 0
(0.0 & 1) == 0
(1.0 & 0) == 0
(1.0 & 1) == 1
(0 & 0.0) == 0
(0 & 1.0) == 0
(1 & 0.0) == 0
(1 & 1.0) == 1
% or
(0.0 | 0.0) == 0
(0.0 | 1.0) == 1
(1.0 | 0.0) == 1
(1.0 | 1.0) == 1
(0.0 | 0) == 0
(0.0 | 1) == 1
(1.0 | 0) == 1
(1.0 | 1) == 1
(0 | 0.0) == 0
(0 | 1.0) == 1
(1 | 0.0) == 1
(1 | 1.0) == 1
% mand
(0.0 && 0.0) == 0
(0.0 && 1.0) == 0
(1.0 && 0.0) == 0
(1.0 && 1.0) == 1
(0.0 && 0) == 0
(0.0 && 1) == 0
(1.0 && 0) == 0
(1.0 && 1) == 1
(0 && 0.0) == 0
(0 && 1.0) == 0
(1 && 0.0) == 0
(1 && 1.0) == 1
% mor
(0.0 || 0.0) == 0
(0.0 || 1.0) == 1
(1.0 || 0.0) == 1
(1.0 || 1.0) == 1
(0.0 || 0) == 0
(0.0 || 1) == 1
(1.0 || 0) == 1
(1.0 || 1) == 1
(0 || 0.0) == 0
(0 || 1.0) == 1
(1 || 0.0) == 1
(1 || 1.0) == 1
% not
!(1.0) == 0
!(0.0) == 1
% colon
(1.0 : 0.25 : 1.5) == [1.0, 1.25, 1.5]
(1.5 : 1 : 3.5) == [1.5, 2.5, 3.5]
(1.0 : 0.5 : 2) == [1.0, 1.5, 2.0]
(1 : 0.5 : 2.0) == [1.0, 1.5, 2.0]
(1 : 0.5 : 2) == [1.0, 1.5, 2.0]
% ctranspose
3.0' == 3.0
% transpose
(5.0).' == 5.0
% horzcat
[2.0, 3] == [2.0, 3.0]
[2, 3.5] == [2.0, 3.5]
[3.14, 1 : 3] == [3.14, 1.0, 2.0, 3.0]
% vertcat
[2.0; 3] == [2.0; 3.0]
[2; 5.0] == [2.0; 5.0]

% === complex ===
% eq
2i == 2.0i
2i == 2j
2i == 2I
2i == 2J
2i == 2e0i
2i == 2E0i
2i == 2.0e0i
2i == 2.0E0i
2i == 2e+0i
2i == 2E+0i
2i == 2.0e+0i
2i == 2.0E+0i
% plus
2i + 3i == 5i
2i + 3.0 == 3.0 + 2.0i
2i + 3 == 3.0 + 2.0i
% minus
% uminus
% times
% mtimes

% === vector ===

% === matrix ===

% === complex vector ===

% === complex matrix ===

